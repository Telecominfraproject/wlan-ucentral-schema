{%
	// Helper functions

	// has_ functions - check for existence/availability
	function has_upstream_vlan() {
		return interface.role == 'upstream' && ethernet.has_vlan(interface);
	}

	function has_dns_servers() {
		return ipv4.use_dns && length(ipv4.use_dns) > 0;
	}

	function has_vendor_class() {
		return ipv4.vendor_class != null;
	}

	function has_request_options() {
		return ipv4.request_options && length(ipv4.request_options) > 0;
	}

	// is_ functions - boolean checks/validation
	function is_static_mode() {
		return ipv4_mode == 'static';
	}

	function is_dynamic_mode() {
		return ipv4_mode == 'dynamic';
	}

	// Configuration generation functions
	function generate_ipv4_routing_config() {
		if (!has_upstream_vlan())
			return '';

		let output = [];

		uci_comment(output, '# generated by interface/ipv4.uc');
		uci_comment(output, '### generate IPv4 routing configuration');
		uci_set_string(output, `network.${name}.ip4table`, routing_table.get(this_vid));

		return uci_output(output);
	}

	function generate_ipv4_addressing_config() {
		let output = [];

		if (!generate_ipv4_routing_config()) {
			uci_comment(output, '# generated by interface/ipv4.uc');
		}
		uci_comment(output, '### generate IPv4 addressing configuration');

		if (is_static_mode()) {
			uci_set_string(output, `network.${name}.ipaddr`, ipv4.subnet);
			uci_set_string(output, `network.${name}.gateway`, ipv4.gateway);
		} else {
			uci_set_boolean(output, `network.${name}.peerdns`, !length(ipv4.use_dns));
		}

		return uci_output(output);
	}

	function generate_ipv4_dhcp_config() {
		if (!is_dynamic_mode())
			return '';

		let output = [];

		uci_comment(output, '### generate IPv4 DHCP configuration');

		if (has_vendor_class())
			uci_set_string(output, `network.${name}.vendorid`, ipv4.vendor_class);

		if (has_request_options())
			uci_set_string(output, `network.${name}.reqopts`, join(' ', ipv4.request_options));

		return uci_output(output);
	}

	function generate_ipv4_dns_config() {
		if (!has_dns_servers())
			return '';

		let output = [];

		uci_comment(output, '### generate IPv4 DNS configuration');

		for (let dns in ipv4.use_dns)
			uci_list_string(output, `network.${name}.dns`, dns);

		return uci_output(output);
	}
%}

{{ generate_ipv4_routing_config() }}
{{ generate_ipv4_addressing_config() }}
{{ generate_ipv4_dhcp_config() }}
{{ generate_ipv4_dns_config() }}
