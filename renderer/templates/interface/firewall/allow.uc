{%
	// Helper functions

	// has_ functions - check for existence/availability
	function has_source_address() {
		return !!allow.source_address;
	}

	function has_source_ports() {
		return allow.source_ports && length(allow.source_ports) > 0;
	}

	function has_destination_ports() {
		return allow.destination_ports && length(allow.destination_ports) > 0;
	}

	// is_ functions - boolean checks/validation
	function is_any_protocol() {
		return allow.protocol in ['any', 'all', '*'] && (has_source_ports() || has_destination_ports());
	}

	// normalize_ functions - data transformation
	function normalize_protocols() {
		return is_any_protocol() ? ['tcp', 'udp'] : [allow.protocol];
	}

	function normalize_destination_ip() {
		return ipcalc.expand_wildcard_address(allow.destination_address, destination_subnet);
	}

	// Configuration generation functions
	function generate_traffic_allow_rule() {
		let output = [];

		uci_comment(output, '# generated by interface/firewall/allow.uc');
		uci_comment(output, '### generate traffic allow rule');
		uci_section(output, 'firewall rule');
		uci_set_string(output, 'firewall.@rule[-1].name', `Allow traffic to ${allow.destination_address}`);
		uci_set_string(output, 'firewall.@rule[-1].family', family);
		uci_set_string(output, 'firewall.@rule[-1].src', source_zone || '*');
		uci_set_string(output, 'firewall.@rule[-1].dest', destination_zone);

		for (let proto in normalize_protocols())
			uci_list_string(output, 'firewall.@rule[-1].proto', proto);

		if (has_source_address())
			uci_set_string(output, 'firewall.@rule[-1].src_ip', allow.source_address);

		for (let sport in allow.source_ports)
			uci_list_string(output, 'firewall.@rule[-1].src_port', sport);

		uci_set_string(output, 'firewall.@rule[-1].dest_ip', normalize_destination_ip());

		for (let dport in allow.destination_ports)
			uci_list_string(output, 'firewall.@rule[-1].dest_port', dport);

		uci_set_string(output, 'firewall.@rule[-1].target', 'ACCEPT');

		return uci_output(output);
	}
%}

{{ generate_traffic_allow_rule() }}

