{%
	// Constants
	const DEFAULT_PREFIX_SIZE = '64';
	const DEFAULT_REQ_PREFIX = 'auto';

	// Helper functions

	// has_ functions - check for existence/availability
	function has_upstream_vlan() {
		return interface.role == 'upstream' && ethernet.has_vlan(interface);
	}

	// is_ functions - boolean checks/validation
	function is_static_mode() {
		return ipv6_mode == 'static';
	}

	// normalize_ functions - data transformation
	function normalize_prefix_size() {
		return ipv6.prefix_size || DEFAULT_PREFIX_SIZE;
	}

	function normalize_req_prefix() {
		return ipv6.prefix_size || DEFAULT_REQ_PREFIX;
	}

	// Configuration generation functions
	function generate_ipv6_routing_config() {
		if (!has_upstream_vlan())
			return '';

		let output = [];

		uci_comment(output, '# generated by interface/ipv6.uc');
		uci_comment(output, '### generate IPv6 routing configuration');
		uci_set_string(output, `network.${name}.ip6table`, routing_table.get(this_vid));

		return uci_output(output);
	}

	function generate_ipv6_addressing_config() {
		let output = [];

		if (!generate_ipv6_routing_config()) {
			uci_comment(output, '# generated by interface/ipv6.uc');
		}
		uci_comment(output, '### generate IPv6 addressing configuration');

		if (is_static_mode()) {
			uci_set_string(output, `network.${name}.ip6addr`, ipv6.subnet);
			uci_set_string(output, `network.${name}.ip6gw`, ipv6.gateway);
			uci_set_string(output, `network.${name}.ip6assign`, normalize_prefix_size());
		} else {
			uci_set_string(output, `network.${name}.reqprefix`, normalize_req_prefix());
		}

		return uci_output(output);
	}
%}

{{ generate_ipv6_routing_config() }}
{{ generate_ipv6_addressing_config() }}
