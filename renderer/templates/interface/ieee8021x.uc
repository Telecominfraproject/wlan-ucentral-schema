{%
	// Helper functions

	// is_ functions - boolean checks/validation
	function is_upstream_interface() {
		return interface.role == 'upstream';
	}

	// normalize_ functions - data transformation
	function normalize_port_name(port) {
		return replace(port, '.', '_');
	}

	function normalize_auth_vlan() {
		return interface.dot1x_vlan + ':u';
	}

	// Configuration generation functions
	function generate_ieee8021x_port_config(port) {
		let output = [];

		uci_section(output, 'ieee8021x port');
		uci_set_string(output, 'ieee8021x.@port[-1].iface', port);
		uci_set_number(output, 'ieee8021x.@port[-1].vlan', this_vid);
		uci_set_boolean(output, 'ieee8021x.@port[-1].upstream', is_upstream_interface());

		// Add WAN ports
		for (let wan_port in keys(eth_ports))
			uci_list_string(output, 'ieee8021x.@port[-1].wan_ports', wan_port);

		return uci_output(output);
	}

	function generate_network_device_config(port) {
		let output = [];
		let nport = normalize_port_name(port);

		uci_named_section(output, `network.${nport}`, 'device');
		uci_set_string(output, `network.${nport}.name`, port);
		uci_set_string(output, `network.${nport}.auth`, '1');
		uci_set_string(output, `network.${nport}.auth_vlan`, normalize_auth_vlan());

		return uci_output(output);
	}

	function generate_bridge_ports_config(port) {
		let output = [];

		if (is_upstream_interface())
			uci_list_string(output, 'network.up.ports', port);
		else
			uci_list_string(output, 'network.down.ports', port);

		return uci_output(output);
	}

	function generate_dot1x_config() {
		let sections = [];

		uci_comment(sections, '# generated by interface/ieee8021x.uc');
		uci_comment(sections, '### generate IEEE 802.1X configuration');

		for (let port in dot1x_ports) {
			let port_config = generate_ieee8021x_port_config(port);
			if (port_config)
				push(sections, port_config);

			let device_config = generate_network_device_config(port);
			if (device_config)
				push(sections, device_config);

			let bridge_config = generate_bridge_ports_config(port);
			if (bridge_config)
				push(sections, bridge_config);
		}

		return uci_output(sections);
	}
%}

{{ generate_dot1x_config() }}
