{%
	// Constants
	const DEFAULT_WIFI_BANDS = [ '2G', '5G' ];
	const ADMIN_UI_SUBNET = '10.254.254.1/24';
	const ADMIN_UI_SERVICES = [ 'ssh', 'http' ];

	// Variables initialization
	let admin_ui = state.services?.admin_ui;
	if (!admin_ui?.wifi_ssid)
		return;

	// Helper functions
	function has_admin_ui() {
		return state.services?.admin_ui?.wifi_ssid;
	}

	function has_wifi_key() {
		return admin_ui.wifi_key && length(admin_ui.wifi_key) > 0;
	}

	function get_wifi_bands() {
		return admin_ui.wifi_bands || DEFAULT_WIFI_BANDS;
	}

	function get_encryption_config() {
		if (has_wifi_key()) {
			return {
				proto: 'psk2',
				key: admin_ui.wifi_key
			};
		}
		return {
			proto: 'none'
		};
	}

	// Configuration generation functions
	function generate_admin_ui_interface() {
		if (!has_admin_ui())
			return;

		let interface = {
			admin_ui: true,
			name: 'Admin-UI',
			role: 'downstream',
			auto_start: 0,
			services: ADMIN_UI_SERVICES,
			ipv4: {
				addressing: 'static',
				subnet: ADMIN_UI_SUBNET,
				dhcp: {
					lease_first: 10,
					lease_count: 10,
					lease_time: '6h'
				}
			},
			ssids: [
				{
					name: admin_ui.wifi_ssid,
					wifi_bands: get_wifi_bands(),
					bss_mode: 'ap',
					encryption: get_encryption_config()
				}
			]
		};

		push(state.interfaces, interface);
	}

	function generate_offline_trigger() {
		if (!has_admin_ui())
			return '';

		let output = [];
		
		uci_comment(output, '# generated by admin_ui.uc');
		uci_comment(output, '### generate admin UI offline trigger configuration');
		uci_set_number(output, 'state.ui.offline_trigger', admin_ui.offline_trigger);

		return uci_output(output);
	}

	// Main logic
	let admin_ui = state.services?.admin_ui;
	
	// Early return if admin_ui is not configured
	if (!has_admin_ui())
		return;

	// Generate interface configuration (modifies state.interfaces)
	generate_admin_ui_interface();
%}
{{ generate_offline_trigger() }}