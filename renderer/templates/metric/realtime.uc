# generated by realtime.uc

{%
// Helper functions

function has_realtime_config(realtime) {
    return realtime && realtime?.types && length(realtime.types) > 0;
}

function has_valid_events(realtime, events) {
    if (!has_realtime_config(realtime)) return false;
    
    for (let type in realtime.types) {
        if (type in events) {
            return true;
        }
    }
    return false;
}

function get_valid_event_types(realtime, events) {
    let valid_types = [];
    
    if (!has_realtime_config(realtime)) return valid_types;
    
    for (let type in realtime.types) {
        if (type in events) {
            push(valid_types, type);
        }
    }
    
    return valid_types;
}

// Generation functions

function generate_realtime_config(realtime, events) {
    if (!has_valid_events(realtime, events)) return '';
    
    let output = [];
    uci_comment(output, '# Realtime event configuration');
    
    let valid_types = get_valid_event_types(realtime, events);
    for (let type in valid_types) {
        uci_list_string(output, 'event.realtime.filter', type);
    }
    
    return uci_output(output);
}

// Main template execution

print(generate_realtime_config(realtime, events));
%}
