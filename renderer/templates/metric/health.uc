{%
// generated by health.uc

// 1. Early validation and setup
if (!health)
	return;

// 2. Helper functions

// has_ functions - check for existence/availability
function has_health_config(config) {
	return config?.health;
}

function has_interval_config(config) {
	return config?.health?.interval !== null && config?.health?.interval !== undefined;
}

// is_ functions - boolean checks/validation
function is_dhcp_local_enabled(config) {
	return config?.health?.dhcp_local ?? true;  // Default is true per schema
}

function is_dhcp_remote_enabled(config) {
	return config?.health?.dhcp_remote ?? false;  // Default is false per schema
}

function is_dns_local_enabled(config) {
	return config?.health?.dns_local ?? true;  // Default is true per schema
}

function is_dns_remote_enabled(config) {
	return config?.health?.dns_remote ?? true;  // Default is true per schema
}

// 3. Configuration generation functions

function generate_health_config(config) {
	if (!has_health_config(config))
		return '';

	let output = [];
	
	uci_comment(output, '### generate health monitoring configuration');
	
	// Set interval if configured
	if (has_interval_config(config)) {
		uci_set_number(output, 'state.health.interval', config.health.interval);
	}
	
	// Set health check enables/disables
	uci_set_boolean(output, 'state.health.dhcp_local', is_dhcp_local_enabled(config));
	uci_set_boolean(output, 'state.health.dhcp_remote', is_dhcp_remote_enabled(config));
	uci_set_boolean(output, 'state.health.dns_local', is_dns_local_enabled(config));
	uci_set_boolean(output, 'state.health.dns_remote', is_dns_remote_enabled(config));
	
	return uci_output(output);
}

// 4. Template data preparation
let template_data = {
	health: health
};
%}

{{ generate_health_config(template_data) }}