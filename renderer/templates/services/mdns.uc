{%
	// Helper functions
	function has_umdns_service() {
		return services.is_present("umdns");
	}

	function get_mdns_interfaces() {
		// Use all interfaces if fingerprint service is enabled
		if (state.services?.fingerprint)
			return state.interfaces;
		
		// Otherwise use only interfaces with mdns service configured
		return services.lookup_interfaces("mdns");
	}

	function has_mdns_interfaces() {
		let interfaces = get_mdns_interfaces();

		return length(interfaces) > 0;
	}

	// Configuration generation functions
	function generate_mdns_config() {
		if (!has_umdns_service() || !has_mdns_interfaces())
			return '';

		let interfaces = get_mdns_interfaces();
		let output = [];

		uci_comment(output, '# generated by mdns.uc');
		uci_comment(output, '### generate MDNS service configuration');
		uci_section(output, 'umdns umdns');
		uci_set_number(output, 'umdns.@umdns[-1].enable', 1);

		for (let interface in interfaces) {
			let name = ethernet.calculate_name(interface);
			uci_list_string(output, 'umdns.@umdns[-1].network', name);
		}

		return uci_output(output);
	}

	function generate_firewall_rules() {
		if (!has_umdns_service() || !has_mdns_interfaces())
			return '';

		let interfaces = get_mdns_interfaces();
		let output = [];

		uci_comment(output, '### generate MDNS firewall rules');

		for (let interface in interfaces) {
			let name = ethernet.calculate_name(interface);

			uci_section(output, 'firewall rule');
			uci_set_string(output, 'firewall.@rule[-1].name', 'Allow-mdns-' + name);
			uci_set_string(output, 'firewall.@rule[-1].src', name);
			uci_set_string(output, 'firewall.@rule[-1].dest_port', '5353');
			uci_set_string(output, 'firewall.@rule[-1].proto', 'udp');
			uci_set_string(output, 'firewall.@rule[-1].target', 'ACCEPT');
		}

		return uci_output(output);
	}

	// Main logic
	if (!has_umdns_service())
		return;

	let enable = has_mdns_interfaces();
	services.set_enabled("umdns", enable);

	if (!enable)
		return;
%}

{{ generate_mdns_config() }}
{{ generate_firewall_rules() }}

