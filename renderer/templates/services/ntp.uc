{%
	// Helper functions
	function has_ntp_config() {
		return length(ntp) > 0;
	}

	function get_ntp_interfaces() {
		return services.lookup_interfaces("ntp");
	}

	function has_ntp_interfaces() {
		let interfaces = get_ntp_interfaces();
		return length(interfaces) > 0;
	}

	function has_ntp_servers() {
		return ntp.servers && length(ntp.servers) > 0;
	}

	// Configuration generation functions
	function generate_ntp_config() {
		if (!has_ntp_config())
			return '';

		let interfaces = get_ntp_interfaces();
		let enable_server = has_ntp_interfaces();
		let output = [];

		uci_comment(output, '# generated by ntp.uc');
		uci_comment(output, '### generate NTP service configuration');
		uci_set_boolean(output, 'system.ntp.enable_server', enable_server);

		if (has_ntp_servers()) {
			uci_set_number(output, 'system.ntp.use_dhcp', 0);
			push(output, 'delete system.ntp.server');

			for (let server in ntp.servers)
				uci_list_string(output, 'system.ntp.server', server);
		}

		return uci_output(output);
	}

	function generate_firewall_rules() {
		if (!has_ntp_config() || !has_ntp_interfaces())
			return '';

		let interfaces = get_ntp_interfaces();
		let output = [];

		uci_comment(output, '### generate NTP firewall rules');

		for (let interface in interfaces) {
			let name = ethernet.calculate_name(interface);

			uci_section(output, 'firewall rule');
			uci_set_string(output, 'firewall.@rule[-1].name', 'Allow-ntp-' + name);
			uci_set_string(output, 'firewall.@rule[-1].src', name);
			uci_set_string(output, 'firewall.@rule[-1].dest_port', '123');
			uci_set_string(output, 'firewall.@rule[-1].proto', 'udp');
			uci_set_string(output, 'firewall.@rule[-1].target', 'ACCEPT');
		}

		return uci_output(output);
	}

	// Main logic
	if (!has_ntp_config())
		return;
%}

{{ generate_ntp_config() }}
{{ generate_firewall_rules() }}
