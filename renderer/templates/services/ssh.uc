{%
	// Helper functions
	function has_ssh_interfaces() {
		let interfaces = services.lookup_interfaces("ssh");

		return length(interfaces) > 0;
	}

	function get_ssh_interfaces() {
		return services.lookup_interfaces("ssh");
	}

	function is_ssh_restricted() {
		return restrict.ssh && has_ssh_interfaces();
	}

	function has_authorized_keys() {
		return ssh.authorized_keys && length(ssh.authorized_keys) > 0;
	}

	// Configuration generation functions
	function generate_ssh_config() {
		let interfaces = get_ssh_interfaces();
		let enable = has_ssh_interfaces();

		if (is_ssh_restricted()) {
			warn('SSH is restricted');
			return '';
		}

		services.set_enabled("dropbear", enable);

		if (!enable)
			return '';

		let output = [];

		uci_comment(output, '# generated by ssh.uc');
		uci_comment(output, '### generate SSH service configuration');
		uci_set_boolean(output, 'dropbear.@dropbear[-1].enable', enable);
		uci_set_string(output, 'dropbear.@dropbear[-1].Port', ssh.port);
		uci_set_boolean(output, 'dropbear.@dropbear[-1].PasswordAuth', ssh.password_authentication);
		uci_set_number(output, 'dropbear.@dropbear[-1].IdleTimeout', ssh.idle_timeout);

		return uci_output(output);
	}

	function generate_firewall_rules() {
		let interfaces = get_ssh_interfaces();
		let enable = has_ssh_interfaces();

		if (is_ssh_restricted() || !enable)
			return '';

		let output = [];

		uci_comment(output, '### generate SSH firewall rules');

		for (let interface in interfaces) {
			let name = ethernet.calculate_name(interface);
			uci_section(output, 'firewall rule');
			uci_set_string(output, 'firewall.@rule[-1].name', 'Allow-ssh-' + name);
			uci_set_string(output, 'firewall.@rule[-1].src', name);
			uci_set_string(output, 'firewall.@rule[-1].dest_port', ssh.port);
			uci_set_string(output, 'firewall.@rule[-1].proto', 'tcp');
			uci_set_string(output, 'firewall.@rule[-1].target', 'ACCEPT');
		}

		return uci_output(output);
	}

	function generate_authorized_keys() {
		let enable = has_ssh_interfaces();

		if (is_ssh_restricted() || !enable || !has_authorized_keys())
			return;

		files.add_named("/etc/dropbear/authorized_keys", join("\n", ssh.authorized_keys) + "\n");
	}

	// Main logic
	if (!has_ssh_interfaces())
		return;

	generate_authorized_keys();
%}

{{ generate_ssh_config() }}
{{ generate_firewall_rules() }}
