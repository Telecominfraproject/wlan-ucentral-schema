{%
	// Helper functions
	function has_ieee8021x_service() {
		return services.is_present("ieee8021x");
	}

	function has_ieee8021x_interfaces() {
		for (let k, iface in state.interfaces)
			if (length(iface.ieee8021x_ports))
				return true;

		return false;
	}

	function is_radius_mode() {
		return ieee8021x.mode == "radius";
	}

	function validate_radius_config() {
		if (!ieee8021x.radius?.auth_server_addr ||
		    !ieee8021x.radius?.auth_server_port ||
		    !ieee8021x.radius?.auth_server_secret) {
			warn('invalid radius configuration');

			return false;
		}

		return true;
	}

	function get_certificates() {
		cursor.load("system");

		return cursor.get_all("system", "@certificates[-1]");
	}

	// Configuration generation functions
	function generate_base_config() {
		let output = [];
		let certs = get_certificates();

		uci_comment(output, '# generated by ieee8021x.uc');
		uci_comment(output, '### generate ieee8021x base configuration');
		uci_section(output, 'ieee8021x config');
		uci_set_string(output, 'ieee8021x.@config[-1].ca', certs.ca);
		uci_set_string(output, 'ieee8021x.@config[-1].cert', certs.cert);
		uci_set_string(output, 'ieee8021x.@config[-1].key', certs.key);

		return uci_output(output);
	}

	function generate_radius_config() {
		if (!is_radius_mode())
			return '';

		let output = [];

		uci_comment(output, '### generate ieee8021x radius configuration');
		uci_set_string(output, 'ieee8021x.@config[-1].nas_identifier', ieee8021x.radius.nas_identifier);
		uci_set_string(output, 'ieee8021x.@config[-1].auth_server_addr', ieee8021x.radius.auth_server_addr);
		uci_set_string(output, 'ieee8021x.@config[-1].auth_server_port', ieee8021x.radius.auth_server_port);
		uci_set_string(output, 'ieee8021x.@config[-1].auth_server_secret', ieee8021x.radius.auth_server_secret);
		uci_set_string(output, 'ieee8021x.@config[-1].acct_server_addr', ieee8021x.radius.acct_server_addr);
		uci_set_string(output, 'ieee8021x.@config[-1].acct_server_port', ieee8021x.radius.acct_server_port);
		uci_set_string(output, 'ieee8021x.@config[-1].acct_server_secret', ieee8021x.radius.acct_server_secret);
		uci_set_string(output, 'ieee8021x.@config[-1].coa_server_addr', ieee8021x.radius.coa_server_addr);
		uci_set_string(output, 'ieee8021x.@config[-1].coa_server_port', ieee8021x.radius.coa_server_port);
		uci_set_string(output, 'ieee8021x.@config[-1].coa_server_secret', ieee8021x.radius.coa_server_secret);
		uci_set_boolean(output, 'ieee8021x.@config[-1].mac_address_bypass', ieee8021x.radius.mac_address_bypass);

		return uci_output(output);
	}

	function generate_users_config() {
		if (is_radius_mode())
			return;

		files.add_named("/var/run/hostapd-ieee8021x.eap_user", render("../eap_users.uc", { users: ieee8021x.users }));
	}

	// Main logic
	if (!ieee8021x || !has_ieee8021x_service())
		return;

	let enable = has_ieee8021x_interfaces();

	if (is_radius_mode() && !validate_radius_config())
		enable = false;

	services.set_enabled("ieee8021x", enable);

	if (!enable)
		return;

	generate_users_config();
%}

{{ generate_base_config() }}
{{ generate_radius_config() }}

