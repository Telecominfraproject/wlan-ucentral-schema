{%
	// Helper functions
	function has_lldpd_service() {
		return services.is_present("lldpd");
	}

	function get_lldp_interfaces() {
		return services.lookup_interfaces("lldp");
	}

	function has_lldp_enabled() {
		let interfaces = get_lldp_interfaces();

		return length(interfaces) > 0;
	}

	function get_interface_ports(interfaces) {
		let all_ports = [];

		for (let interface in interfaces) {
			let ports = ethernet.lookup_by_interface_spec(interface);
		
			for (let port in ports)
				push(all_ports, port);
		}

		return all_ports;
	}

	// Configuration generation functions
	function generate_lldp_config() {
		if (!has_lldpd_service())
			return '';
		
		let interfaces = get_lldp_interfaces();
		let enable = has_lldp_enabled();
		
		services.set_enabled("lldpd", enable);
		
		if (!enable)
			return '';

		let output = [];
		let ports = get_interface_ports(interfaces);

		uci_comment(output, '# generated by lldp.uc');
		uci_comment(output, '');
		uci_comment(output, '### generate LLDP configuration');
		uci_set_string(output, 'lldpd.config.enable', '1');
		uci_set_string(output, 'lldpd.config.lldp_description', lldp.describe);
		uci_set_string(output, 'lldpd.config.lldp_location', lldp.location);
		
		for (let port in ports)
			uci_list_string(output, 'lldpd.config.interface', port);

		return uci_output(output);
	}

	// Early validation
	if (!has_lldpd_service())
		return;
%}

{{ generate_lldp_config() }}
