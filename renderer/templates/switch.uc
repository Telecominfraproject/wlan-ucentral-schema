{%
	// Constants
	const MIRROR_DEFAULTS = {
		network_ifname: 'eth1',
		network_proto: 'none'
	};

	// Helper functions

	// has_ functions - check for existence/availability
	function has_port_mirror_config() {
		return state.switch.port_mirror &&
		       state.switch.port_mirror.monitor_ports &&
		       state.switch.port_mirror.analysis_port;
	}

	function has_monitor_ports() {
		return state.switch.port_mirror.monitor_ports &&
		       length(state.switch.port_mirror.monitor_ports) > 0;
	}

	function has_analysis_port() {
		return !!state.switch.port_mirror.analysis_port;
	}

	// normalize_ functions - data transformation
	function normalize_analysis_ports() {
		return ethernet.lookup_by_select_ports([state.switch.port_mirror.analysis_port]);
	}

	function normalize_monitor_ports() {
		return ethernet.lookup_by_select_ports(state.switch.port_mirror.monitor_ports);
	}

	// Configuration generation functions
	function generate_port_mirror_config() {
		if (!has_port_mirror_config())
			return '';

		let analysis = normalize_analysis_ports();
		let mirrors = normalize_monitor_ports();

		// Reserve the analysis port
		ethernet.reserve_port(state.switch.port_mirror.analysis_port);

		let output = [];

		uci_comment(output, '# generated by switch.uc');
		uci_comment(output, '### generate Switch port-mirror configuration');
		uci_named_section(output, 'switch.mirror', 'port-mirror');

		for (let mirror in mirrors)
			uci_list_string(output, 'switch.mirror.monitor', mirror);

		uci_set_string(output, 'switch.mirror.analysis', analysis[0]);

		return uci_output(output);
	}

	function generate_mirror_network_interface() {
		let output = [];

		if (!generate_port_mirror_config()) {
			uci_comment(output, '# generated by switch.uc');
		}
		uci_comment(output, '### generate mirror network interface');
		uci_named_section(output, 'network.mirror', 'interface');
		uci_set_string(output, 'network.mirror.ifname', MIRROR_DEFAULTS.network_ifname);
		uci_set_string(output, 'network.mirror.proto', MIRROR_DEFAULTS.network_proto);

		return uci_output(output);
	}
%}

{{ generate_port_mirror_config() }}
{{ generate_mirror_network_interface() }}
