{%
	// Helper functions
	function has_ethernet_config() {
		return ports.select_ports && length(ports.select_ports) > 0;
	}

	function has_speed_duplex_config() {
		return ports.speed || ports.duplex;
	}

	function has_poe_config() {
		return ports?.poe && services.is_present("poe");
	}

	function get_ethernet_ports() {
		return ethernet.lookup_by_select_ports(ports.select_ports);
	}

	function get_poe_port_numbers() {
		let ports_name = ethernet.lookup_name_by_select_ports(ports.select_ports);
		let ports_num = [];
		
		for (let port_name in ports_name) {
			let ret = wildcard(port_name, "LAN*");
			if (ret) {
				let port_num = substr(port_name, 3);
				push(ports_num, port_num);
			}
			//TODO: WAN PoE handle.
		}
		
		return ports_num;
	}

	// Configuration generation functions
	function generate_ethernet_config() {
		let output = [];
		let eth_ports = get_ethernet_ports();

		uci_comment(output, '# generated by ethernet.uc');
		uci_comment(output, '### generate ethernet port configuration');
		
		for (let port in eth_ports) {
			let nport = replace(port, '.', '_');
			
			uci_named_section(output, sprintf('network.%s', nport), 'device');
			uci_set_string(output, sprintf('network.%s.name', nport), port);
			uci_set_string(output, sprintf('network.%s.ifname', nport), port);
			uci_set_boolean(output, sprintf('network.%s.enabled', nport), ports.enabled);
			
			if (has_speed_duplex_config()) {
				if (ports.speed) {
					uci_set_number(output, sprintf('network.%s.speed', nport), ports.speed);
				}
				if (ports.duplex) {
					uci_set_boolean(output, sprintf('network.%s.duplex', nport), ports.duplex == "full");
				}
			}
		}

		return uci_output(output);
	}

	function generate_poe_config() {
		if (!has_poe_config())
			return '';

		let ports_num = get_poe_port_numbers();
		if (length(ports_num) == 0)
			return '';

		let output = [];
		
		uci_comment(output, '#poe');
		uci_comment(output, '### generate PoE port configuration');
		
		for (let num in ports_num) {
			uci_set_boolean(output, sprintf('poe.@port[%d].admin_mode', num - 1), ports.poe.admin_mode);
		}

		return uci_output(output);
	}

	// Main template logic
	if (!has_ethernet_config())
		return;
%}

{{ generate_ethernet_config() }}
{{ generate_poe_config() }}
